----------------------------Day1-----------------------------------------------------------
--Write a Python class to convert an integer to a Roman numeral.
class roman:
    def __init__(self):
        self.roman_numerals = {
            1000: 'M', 900: 'CM', 500: 'D', 400: 'CD',
            100: 'C', 90: 'XC', 50: 'L', 40: 'XL',
            10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'
        }
        
    def convert(self, num):
        if not isinstance(num, int) or num <= 0 or num > 3999:
            raise ValueError("Input must be a positive integer between 1 and 3999")
        
        roman_numeral = ""
        for value, symbol in self.roman_numerals.items():
            while num >= value:
                roman_numeral += symbol
                num -= value
        
        return roman_numeral


converter = IntegerToRoman()
number = 1984
roman_number = converter.convert(number)
print(f"{number} in Roman numerals is: {roman_number}")

--- Write a Python class to get all possible unique subsets from a set of distinct integers.
Input : [4, 5, 6]
Output : [[], [6], [5], [5, 6], [4], [4, 6], [4, 5], [4, 5, 6]]

class SubsetGenerator:
    def __init__(self):
        self.subsets = []

    def generate_subsets(self, nums):
        self._generate(nums, [], 0)
        return self.subsets

    def _generate(self, nums, current_subset, index):
        self.subsets.append(current_subset[:])

        for i in range(index, len(nums)):
            current_subset.append(nums[i])
            self._generate(nums, current_subset, i + 1)
            current_subset.pop()


nums = [4, 5, 6]
subset_generator = SubsetGenerator()
all_subsets = subset_generator.generate_subsets(nums)
for subset in all_subsets:
    print(subset)

---- Write a Python class named Student with two attributes student_id, student_name. Add a new attribute student_class and display the entire attribute and the values of the class. Now remove the student_name attribute and display the entire attribute with values.
class Student:
    def __init__(self, student_id, student_name):
        self.student_id = student_id
        self.student_name = student_name

    def add_class(self, student_class):
        self.student_class = student_class

    def display_attributes(self):
        print("Attributes and Values:")
        attributes = vars(self)
        for attr, value in attributes.items():
            print(f"{attr}: {value}")

    def remove_name(self):
        del self.student_name

# Create an instance of the Student class
student1 = Student(1, "Alice")

# Add student_class attribute
student1.add_class("Class 10")

# Display attributes with student_name
print("Attributes with student_name:")
student1.display_attributes()

# Remove student_name attribute
student1.remove_name()

# Display attributes after removing student_name
print("\nAttributes after removing student_name:")
student1.display_attributes()


------------------------------------Day2------------------------------------------------------------
Question1--
class Employee:
    def __init__(self, emp_id, emp_name, emp_salary, emp_department):
        self.emp_id = emp_id
        self.emp_name = emp_name
        self.emp_salary = emp_salary
        self.emp_department = emp_department

    def calculate_emp_salary(self, hours_worked):
        if hours_worked > 50:
            overtime = hours_worked - 50
            overtime_amount = (overtime * (self.emp_salary / 50))
            total_salary = self.emp_salary + overtime_amount
        else:
            total_salary = self.emp_salary
        return total_salary

    def emp_assign_department(self, new_department):
        self.emp_department = new_department

    def print_employee_details(self):
        print("Employee Details:")
        print(f"Employee ID: {self.emp_id}")
        print(f"Employee Name: {self.emp_name}")
        print(f"Employee Salary: {self.emp_salary}")
        print(f"Employee Department: {self.emp_department}")

# Sample Employee Data
employees_data = [
    ("E7876", "ADAMS", 50000, "ACCOUNTING"),
    ("E7499", "JONES", 45000, "RESEARCH"),
    ("E7900", "MARTIN", 50000, "SALES"),
    ("E7698", "SMITH", 55000, "OPERATIONS")
]

# Create Employee Instances
employees = []
for emp_id, emp_name, emp_salary, emp_department in employees_data:
    employee = Employee(emp_id, emp_name, emp_salary, emp_department)
    employees.append(employee)

# Example Usage
for emp in employees:
    emp.print_employee_details()
    new_department = "HR"  # New department assignment
    emp.emp_assign_department(new_department)
    print(f"Assigned new department: {new_department}")
    hours_worked = 52  # Example hours worked
    total_salary = emp.calculate_emp_salary(hours_worked)
    print(f"Total Salary for {hours_worked} hours worked: {total_salary}\n")

Question2--
class Restaurant:
    def __init__(self):
        self.menu_items = {}
        self.booked_tables = []
        self.customer_orders = {}

    def add_item_to_menu(self, item_name, price):
        self.menu_items[item_name] = price

    def book_table(self, table_number):
        if table_number not in self.booked_tables:
            self.booked_tables.append(table_number)
            print(f"Table {table_number} is booked.")
        else:
            print(f"Table {table_number} is already booked.")

    def customer_order(self, table_number, items):
        if table_number not in self.customer_orders:
            self.customer_orders[table_number] = items
            print(f"Customer at Table {table_number} ordered: {items}")
        else:
            print(f"Customer at Table {table_number} already placed an order.")

    def print_menu(self):
        print("Menu:")
        for item, price in self.menu_items.items():
            print(f"{item}: ${price}")

    def print_booked_tables(self):
        print("Booked Tables:", self.booked_tables)

    def print_customer_orders(self):
        print("Customer Orders:")
        for table, items in self.customer_orders.items():
            print(f"Table {table}: {items}")

# Usage
restaurant = Restaurant()
restaurant.add_item_to_menu("Pizza", 12.99)
restaurant.add_item_to_menu("Burger", 8.99)
restaurant.add_item_to_menu("Pasta", 10.99)
restaurant.book_table(1)
restaurant.book_table(2)
restaurant.book_table(1)
restaurant.customer_order(1, ["Pizza", "Pasta"])
restaurant.customer_order(2, ["Burger"])
restaurant.print_menu()
restaurant.print_booked_tables()
restaurant.print_customer_orders()

--------------------------------------------Day3---------------------------------------
class Author:
    def __init__(self, name, email):
        self.name = name
        self.email = email

class Book:
    def __init__(self, title, date):
        self.title = title
        self.date = date
        self.authors = []

    def add_author(self, author):
        self.authors.append(author)

    def get_authors(self):
        authors_list = ", ".join([author.name for author in self.authors])
        return authors_list

    def get_date(self):
        return self.date

    def get_title(self):
        return self.title

class Email:
    def __init__(self, subject, to, date):
        self.subject = subject
        self.to = to
        self.date = date

    def get_subject(self):
        return self.subject

    def get_to(self):
        return self.to

    def get_date(self):
        return self.date

--------------------------------------------Day4---------------------------------------

Question1---
try:
    num1 = float(input("Enter the first number: "))
    num2 = float(input("Enter the second number: "))

    result = num1 + num2
    print(f"The sum of {num1} and {num2} is {result}")
except ValueError:
    raise TypeError("Input must be numerical")

Question2--
try:
    num = float(input("Enter a number: "))
    print(f"You entered: {num}")
except KeyboardInterrupt:
    print("\nInput was canceled by the user.")
except ValueError:
    print("Invalid input: Please enter a valid number.")

Question3--
file_name = input("Enter the file name: ")

try:
    with open(file_name, "r", encoding="utf-8") as file:
        content = file.read()
        print("File content:\n", content)
except FileNotFoundError:
    print("File not found.")
except UnicodeDecodeError:
    print("Encoding error: Unable to decode the file using UTF-8 encoding.")

Question4--
try:
    my_list = [1, 2, 3]
    length = my_list.length  # Attempting to access non-existent attribute 'length'
    print(f"The length of the list is {length}")
except AttributeError:
    print("AttributeError: The attribute 'length' does not exist.")

-------------------------Day5-------------------------------------------------
from PyQt6 import QtWidgets,uic
import sys
username_main='mac'
password_main='password'
def gotoRegister():
    register.show()
    login.close()

def validate():
    global username_main,password_main
    username=login.username.text()
    password=login.password.text()
    if username==username_main and password==password_main:
        login.status.setText("Logged In")
    else:
        login.status.setText("")
    
def register_user():
    global username_main,password_main
    register.rstatus.setText("Done")
    username_main=register.rusername.text()
    password_main=register.rpass.text()

def gotoLogin():
    login.show()
    register.close()

demo = QtWidgets.QApplication([])
    
login = uic.loadUi("/Users/kguptha/Desktop/login.ui")
register=uic.loadUi("/Users/kguptha/Desktop/register.ui")

login.show()

login.registe.clicked.connect(gotoRegister)
login.loginbtn.clicked.connect(validate)
register.rregister.clicked.connect(register_user)
register.rlogin.clicked.connect(gotoLogin)
sys.exit(demo.exec())
