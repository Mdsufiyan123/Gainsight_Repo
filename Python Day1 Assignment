--Write a Python class to convert an integer to a Roman numeral.
class roman:
    def __init__(self):
        self.roman_numerals = {
            1000: 'M', 900: 'CM', 500: 'D', 400: 'CD',
            100: 'C', 90: 'XC', 50: 'L', 40: 'XL',
            10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'
        }
        
    def convert(self, num):
        if not isinstance(num, int) or num <= 0 or num > 3999:
            raise ValueError("Input must be a positive integer between 1 and 3999")
        
        roman_numeral = ""
        for value, symbol in self.roman_numerals.items():
            while num >= value:
                roman_numeral += symbol
                num -= value
        
        return roman_numeral


converter = IntegerToRoman()
number = 1984
roman_number = converter.convert(number)
print(f"{number} in Roman numerals is: {roman_number}")

--- Write a Python class to get all possible unique subsets from a set of distinct integers.
Input : [4, 5, 6]
Output : [[], [6], [5], [5, 6], [4], [4, 6], [4, 5], [4, 5, 6]]

class SubsetGenerator:
    def __init__(self):
        self.subsets = []

    def generate_subsets(self, nums):
        self._generate(nums, [], 0)
        return self.subsets

    def _generate(self, nums, current_subset, index):
        self.subsets.append(current_subset[:])

        for i in range(index, len(nums)):
            current_subset.append(nums[i])
            self._generate(nums, current_subset, i + 1)
            current_subset.pop()


nums = [4, 5, 6]
subset_generator = SubsetGenerator()
all_subsets = subset_generator.generate_subsets(nums)
for subset in all_subsets:
    print(subset)

---- Write a Python class named Student with two attributes student_id, student_name. Add a new attribute student_class and display the entire attribute and the values of the class. Now remove the student_name attribute and display the entire attribute with values.
class Student:
    def __init__(self, student_id, student_name):
        self.student_id = student_id
        self.student_name = student_name

    def add_class(self, student_class):
        self.student_class = student_class

    def display_attributes(self):
        print("Attributes and Values:")
        attributes = vars(self)
        for attr, value in attributes.items():
            print(f"{attr}: {value}")

    def remove_name(self):
        del self.student_name

# Create an instance of the Student class
student1 = Student(1, "Alice")

# Add student_class attribute
student1.add_class("Class 10")

# Display attributes with student_name
print("Attributes with student_name:")
student1.display_attributes()

# Remove student_name attribute
student1.remove_name()

# Display attributes after removing student_name
print("\nAttributes after removing student_name:")
student1.display_attributes()


